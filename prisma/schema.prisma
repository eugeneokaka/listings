generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id @default(cuid())
  clerkId     String      @unique
  firstname   String?
  lastname    String?
  email       String      @unique
  image       String?
  role        Role        @default(USER)
  verified    Boolean     @default(false)
  createdAt   DateTime    @default(now())

  listings    Listing[]   @relation("UserListings")
  favorites   Favorite[]  @relation("UserFavorites")
  comments    Comment[]   @relation("UserComments")
  ratings     Rating[]    @relation("UserRatings")
}

model Listing {
  id          String        @id @default(cuid())
  title       String
  description String
  category    ListingCategory
  price       Float
  area        String
  location    String
  phone       String?
  mapUrl      String?
  amenities   String[]
  images      Image[]
  comments    Comment[]
  favorites   Favorite[]
  ratings     Rating[]      @relation("ListingRatings")
  views       Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  ownerId     String
  owner       User          @relation("UserListings", fields: [ownerId], references: [id], onDelete: Cascade)
}

model Image {
  id        String   @id @default(cuid())
  url       String
  listingId String
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Comment {
  id         String    @id @default(cuid())
  content    String
  authorId   String?
  listingId  String
  parentId   String?

  author     User?     @relation("UserComments", fields: [authorId], references: [id], onDelete: Cascade)
  listing    Listing   @relation(fields: [listingId], references: [id], onDelete: Cascade)

  parent     Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies    Comment[] @relation("CommentReplies")

  createdAt  DateTime  @default(now())
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  listingId String

  user      User     @relation("UserFavorites", fields: [userId], references: [id], onDelete: Cascade)
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, listingId])
}

model Rating {
  id         String   @id @default(cuid())
  userId     String
  listingId  String
  rate       Int      // 1â€“5 stars
  number     Int      @default(1) // optional extra metric, e.g., to weight averages later

  user       User     @relation("UserRatings", fields: [userId], references: [id], onDelete: Cascade)
  listing    Listing  @relation("ListingRatings", fields: [listingId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())

  @@unique([userId, listingId]) // each user can rate a listing only once
}

enum Role {
  USER
  LANDLORD
  ADMIN
}

enum ListingCategory {
  RENTAL
  BNB
}
